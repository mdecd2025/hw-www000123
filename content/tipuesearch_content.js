var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站:\xa0 https://mdecd2025.github.io/hw-www000123/ \n 學員作業倉儲:  https://github.com/mdecd2025/hw-www000123 \n', 'tags': '', 'url': 'About.html'}, {'title': '每週內容', 'text': '', 'tags': '', 'url': '每週內容.html'}, {'title': 'w1', 'text': '建立自己的可攜 \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w2', 'text': '建立團隊倉儲 \n g11 \n 網址 :\xa0 https://mdecd2025.github.io/2b-g11/ \n 倉儲 :  https://github.com/mdecd2025/2b-g11 \n', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '使用 putty \n \n 使用 ssh keys \n \n \n 使用 git clone 到近端 \n \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': '介紹webots \n', 'tags': '', 'url': 'w4.html'}, {'title': 'w5', 'text': '介紹使用solvespace \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '開始示範使用webots \n 教學hw1製作過程及教學 \n 先用solvespace確定每個連桿之間的角度及長度 \n 在用webots上建立', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '嘗試自己製作hw1 \n 並從示範檔案了解robot下的架構 \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8', 'text': '老師親自示範 hw1 製作方法 \n 並以示範檔案相同的架構製作 \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w9', 'text': '期中考 \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w10', 'text': '複習Hw1 \n \n \n 使用 blender 和 webots 嘗試製作HW2 \n \n 製作HW2 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11', 'text': '我能成功開啟伺服器，並從相同網路，不同電腦控制webot。 \n 但老師原本的程式操作起來十分的不順暢還無法停止，且對電腦負擔很大，所以我使用了chat gpt ，告訴他我覺得需要優化的方向，並讓他來幫我製作程式。 \n \n 優化內容為 : \n 1. 加入time的使用，將無限迴圈變成有過段時間才執行迴圈，避免cpu的浪費 \n 2.按下按鍵才連線，改變成持續連線降低延遲 \n 3. 按鍵按住時執行，放開停止 \n 4.程式修該簡潔明瞭 \n \n 優化方式: \n 1.將while迴圈都添加小延遲 列如: time.sleep(0.1) \n 2和3 更改控制端程式，保持長期連線和 按鍵按住時執行，放開停止 的程式內容如下 \n 模組導入 \n import websocket\nimport json\nimport keyboard  # For capturing key presses\nimport time \n webotscontorller 類型與在此類型下的定義功能 \n class WebotsController:\n    def __init__(self, server_ip, server_port):\n        # 初始化 WebotsController 類別，設定伺服器 IP 和埠號\n        self.server_ip = server_ip              # 儲存 Webots 伺服器的 IPv6 位址\n        self.server_port = server_port          # 儲存 Webots 伺服器的連接埠\n        self.ws = None                          # 用來儲存 WebSocket 連線對象，預設為 None（尚未連線）\n        self.last_direction = None              # 儲存上一次發送的方向指令，用來避免重複發送相同指令\n\n    def connect(self):\n        """建立 WebSocket 連線。"""\n        if not self.ws:\n            # 如果尚未建立連線，才嘗試連線（避免重複連線）\n            ws_url = f"ws://[{self.server_ip}]:{self.server_port}"  # 使用 IPv6 格式建立連線 URL\n            self.ws = websocket.create_connection(ws_url)           # 建立 WebSocket 連線\n            print("Connected to Webots server.")                    # 顯示連線成功訊息\n\n    def send_command(self, direction):\n        """傳送控制指令給機器人。"""\n        # 檢查是否已建立連線，並且指令與上次不同，才發送（避免重複發送相同指令）\n        if self.ws and direction != self.last_direction:\n            message = json.dumps({"direction": direction})          # 將方向指令轉成 JSON 格式的字串\n            self.ws.send(message)                                   # 通過 WebSocket 傳送訊息\n            print(f"Sent command: {direction}")                     # 顯示傳送成功的方向訊息\n            self.last_direction = direction                         # 更新上次發送的指令\n\n    def close(self):\n        """關閉 WebSocket 連線。"""\n        if self.ws:\n            self.ws.close()             # 關閉連線\n            print("Connection closed.") # 顯示已關閉的提示訊息\n            self.ws = None              # 將 ws 設為 None，代表目前沒有連線\n \n 主程式內容 \n def main():\n\n    # 設定 Webots 機器人的 IPv6 伺服器位址與連接埠\n    server_ip = "2001:288:6004:17:fff1:cd25:0:b011"  # 替換為你自己的 Webots 伺服器位址\n    server_port = 1234  # 伺服器開放的 WebSocket 通訊埠\n\n    # 建立控制器物件，用來管理連線與指令傳送\n    controller = WebotsController(server_ip, server_port)\n    \n    print("使用方向鍵控制機器人（UP, DOWN, LEFT, RIGHT）。按下 ESC 鍵退出。")\n\n    while True:\n        try:\n            # 如果還沒有連線，就嘗試建立連線（只建立一次，除非被關閉）\n            if not controller.ws:\n                controller.connect()\n\n            # 偵測是否按下方向鍵，按下對應方向就送出指令\n            if keyboard.is_pressed("up"):\n                controller.send_command("UP")        # 上鍵 → 前進\n            elif keyboard.is_pressed("down"):\n                controller.send_command("DOWN")      # 下鍵 → 後退\n            elif keyboard.is_pressed("left"):\n                controller.send_command("LEFT")      # 左鍵 → 向左旋轉或橫移\n            elif keyboard.is_pressed("right"):\n                controller.send_command("RIGHT")     # 右鍵 → 向右旋轉或橫移\n            else:\n                # 若沒有按任何方向鍵，送出停止指令\n                if controller.ws:\n                    controller.send_command("STOP")\n\n            # 若按下 ESC 鍵，跳出主迴圈結束程式\n            if keyboard.is_pressed("esc"):\n                print("正在退出程式...")\n                break\n\n            # 加入一點點延遲，避免迴圈過度佔用 CPU 資源\n            time.sleep(0.05)\n\n        except Exception as e:\n            # 若執行過程出現錯誤，印出錯誤訊息並中斷迴圈\n            print(f"發生錯誤: {e}")\n            break\n \n if __name__ == "__main__":\n    main() \n 伺服端檔案 \n 控制端檔案 \n w12', 'tags': '', 'url': 'w11.html'}, {'title': 'Homework', 'text': '', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': '每一個連接的長度設定 \n \n \n \n 義名 \n 顏色 \n 長度 \n \n \n 根據 \n 黃 \n 1 \n \n \n 連結1 \n 紅 \n 0.4 \n \n \n 連結2 \n 綠 \n 0.6 \n \n \n 連結3 \n 藍 \n 0.9 \n \n \n \n 機器人的結構如下 \n 機器人 -> 基地\xa0 \n 機器人 ->\xa0 關節1 -> 關節2 -> 關節3 - \n 機器人 ->\xa0 關節4 \n \n 基礎 -> 基礎形狀 \n 關節1->連結1 \n 關節2->連結2 \n 關節3->連結3 \n 關節4->連結3 \n \n HW1檔案\xa0 hw1 \n \n \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023237 \n \n \n 製作完整的過程 \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': '將cad倒出stl，在從stl轉成obj，在使用 blender來選取所需的零組件，再用與HW1相同的架構，只要將shape中的方塊改成mesh就能直接引入obj，並圖片會依照組合圖(stl)的位置來擺放。 \n HW2檔案  hw2 \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023237 \n \n 製作完整的過程 \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': '建立 Webots 桌上籃球遊戲機模擬系統 \n 雖然模型看起來很複雜但其實就只是普通的4連桿，只要把HW1和HW2的內容套用進來就可以順利的製作出來 \n HW3檔案  HW3 \n 一樣是使用mesh \n rabot 的結構和4連桿相同1個接著1個最後再用solidreference連回到link3這樣就能順利和base做成一個4連桿 \n \n \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Exam', 'text': '\n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': '\n \n \n 紅色 \n 0.4 \n 37 \n \n \n 綠色 \n 0.6 \n 28.81 \n \n \n 藍色 \n 0.9 \n 126.93 \n \n \n \n 結構如下 \n robot\n    joint1\n        link1\n        joint2\n            link2\n            link2-1\n            joint3\n                link3\n    joint4\n        link3 \n Exam1 檔案  Exam1 \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023237 \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': '先繪製桿件 \n \n \n \n link1 \n 藍色 \n 1.37m \n \n \n link2 \n 綠色 \n 1m \n \n \n link3 \n 黃色 \n 1.0305m \n \n \n base to base \n 紅色 \n 2m \n \n \n \n robot架構 \n robot\n    base\n    joint1\n        link1\n        joint2\n            link2\n            joint3\n                link3\n    joint4\n        solidreference(link3)\n    base2 \n Exam2 檔案\xa0 Exam2 \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41023237 \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3-1 \n webotsw --stream 啟動 \n 輸入網頁 http://[2001:288:6004:17:fff1:cd25:0:b011]:1234/index.html 填入 ws:/ [2001:288:6004:17:fff1:cd25:0:b011] :1234  連接就可以順利在 瀏覽器檢視啟動串流學員伺服器上的機構模擬 \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final Report', 'text': '\n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Midterm', 'text': '各週進度: \n w1 可攜製作 \n w2 分組 \n w3 建立倉儲和網站 \n w4\xa0 學習如何使用webots(如何使用和如何建立機器人) \n w5\xa0 學習如何製作HW1(建立物件) \n w6\xa0 學習如何製作HW1(放入馬達，並用已有的程式測試馬達的運轉) \n w7\xa0 製作HW1(製作過程影片，和範例相同的條件製作相同的機器人) \n w8 完成Hw1的四連桿運動 \n w9 期中 \n 各週網頁內容: \n w1 \n \n w2 \n \n w3 \n \n w4 \n \n w5 \n \n w6 \n \n w7 \n \n w8 \n \n w9 \n \n 期中心得: \n 我是重修生，由於之前修老師的課因為組員的隨意加上自己沒有監督導致被當掉，回來重修後發現有不同的變化，除了剛開始的內容相同，webots也是第一次使用，內容算不上有趣，但也不會枯燥，不懂的東西還是很多，webots教學網站上也都是英文，想要熟悉需要再花費更多心力，期望這一次可以完整的學習老師的上課內容。 \n 期中自評影片:\xa0 \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n \n \n', 'tags': '', 'url': 'Final.html'}]};